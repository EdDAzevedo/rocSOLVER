
/*! \file */
/* ************************************************************************
 * Copyright (C) 2020-2023 Advanced Micro Devices, Inc. All rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ************************************************************************ */

#pragma once
#ifndef RF_ACCESS_BUNDLED_FACTORS_HPP
#define RF_ACCESS_BUNDLED_FACTORS_HPP


#include "hip_check.h"
#include "hipsparse_check.h"
#include "rocsolver_refactor.h"

/*
-----------------------------------------------------------------------
This routine allows direct access to the lower L and upper U triangular
factors stored in the rocSolverRF library handle. The factors are
compressed into a single matrix M = (L-I) + U, where the unitary
diagonal of L is not stored.  It is assumed that a prior call to the
rocsolverRfRefactor() was done in order to generate these triangular
factors.

The Bundled factor matrix M = (L - I) + U
-----------------------------------------------------------------------
*/

template<typename Iint, typename Ilong, typename T>
rocsolverStatus_t rocsolverRfAccessBundledFactors_impl(/* Input */
                                                  rocsolverRfHandle_t handle,
                                                  /* Output (in the host memory ) */
                                                  Ilong * nnzM,
                                                  /* Output (in the device memory) */
                                                  Ilong** Mp,
                                                  Iint** Mi,
                                                  T** Mx)
{
    /*
    ----------------------------------
    matrix M = (L - eye) + U, 
    L has unit diagonal and not stored

    L, and U generated by rocsolverRfRefactor()
    ----------------------------------
   */
    if(handle == nullptr)
    {
        return (ROCSOLVER_STATUS_NOT_INITIALIZED);
    };

    if(handle->hipsparse_handle == nullptr)
    {
        return (ROCSOLVER_STATUS_NOT_INITIALIZED);
    };

    {
        bool const isok = (handle->csrRowPtrLU != nullptr) && (handle->csrColIndLU != nullptr)
            && (handle->csrValLU_array != nullptr);
        if(!isok)
        {
            return (ROCSOLVER_STATUS_NOT_INITIALIZED);
        };
    };

    hipStream_t streamId;

    HIPSPARSE_CHECK(hipsparseGetStream(handle->hipsparse_handle, &streamId),
                    ROCSOLVER_STATUS_EXECUTION_FAILED);

    *nnzM = handle->nnzLU;

    /*
   ------------------------------------------------------
   Copy only the pointers, not the contents of the arrays
   ------------------------------------------------------
   */

    {
        void* dst = Mp;
        const void* src = &(handle->csrRowPtrLU);
        size_t sizeBytes = sizeof(*Mp);
        hipMemcpyKind kind = hipMemcpyDeviceToDevice;
        HIP_CHECK(hipMemcpyAsync(dst, src, sizeBytes, kind, streamId),
                  ROCSOLVER_STATUS_EXECUTION_FAILED);
    };

    {
        void* dst = Mi;
        const void* src = &(handle->csrColIndLU);
        size_t sizeBytes = sizeof(*Mi);
        hipMemcpyKind kind = hipMemcpyDeviceToDevice;
        HIP_CHECK(hipMemcpyAsync(dst, src, sizeBytes, kind, streamId),
                  ROCSOLVER_STATUS_EXECUTION_FAILED);
    };

    {
        void* dst = Mx;
        int const ibatch = 0;
        const void* src = &(handle->csrValLU_array[ibatch]);
        size_t sizeBytes = sizeof(*Mx);
        hipMemcpyKind kind = hipMemcpyDeviceToDevice;
        HIP_CHECK(hipMemcpyAsync(dst, src, sizeBytes, kind, streamId),
                  ROCSOLVER_STATUS_EXECUTION_FAILED);
    };

    {
        HIP_CHECK(hipStreamSynchronize(streamId), ROCSOLVER_STATUS_EXECUTION_FAILED);
    }

    return (ROCSOLVER_STATUS_SUCCESS);
};

#endif
