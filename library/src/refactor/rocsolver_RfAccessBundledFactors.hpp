
/*! \file */
/* ************************************************************************
 * Copyright (C) 2020-2023 Advanced Micro Devices, Inc. All rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ************************************************************************ */

#pragma once
#ifndef RF_ACCESS_BUNDLED_FACTORS_HPP
#define RF_ACCESS_BUNDLED_FACTORS_HPP

#include "hip_check.h"
#include "hipsparse_check.h"
#include "rocsolver_refactor.h"

/*
-----------------------------------------------------------------------
This routine allows direct access to the lower L and upper U triangular
factors stored in the rocSolverRF library handle. The factors are
compressed into a single matrix M = (L-I) + U, where the unitary
diagonal of L is not stored.  It is assumed that a prior call to the
rocsolverRfRefactor() was done in order to generate these triangular
factors.

The Bundled factor matrix M = (L - I) + U
-----------------------------------------------------------------------
*/

template <typename Iint, typename Ilong, typename T>
rocsolverStatus_t rocsolverRfAccessBundledFactors_impl(/* Input */
                                                       rocsolverRfHandle_t handle,
                                                       /* Output (in the host memory ) */
                                                       Ilong* nnzM,
                                                       /* Output (in the device memory) */
                                                       Ilong** Mp,
                                                       Iint** Mi,
                                                       T** Mx)
{
    /*
    ----------------------------------
    matrix M = (L - eye) + U, 
    L has unit diagonal and not stored

    L, and U generated by rocsolverRfRefactor()
    ----------------------------------
   */
    rocsolverStatus_t istat_return = ROCSOLVER_STATUS_SUCCESS;
    try
    {
        if(handle == nullptr)
        {
            return (ROCSOLVER_STATUS_NOT_INITIALIZED);
        };

        bool const isok_input
            = (nnzM != nullptr) && (Mp != nullptr) && (Mi != nullptr) && (Mx != nullptr);
        if(!isok_input)
        {
            return (ROCSOLVER_STATUS_INVALID_VALUE);
        };

        Iint const n = handle->n;
        Ilong const nnzLU = handle->nnzLU;

        Ilong* const LUp = handle->csrRowPtrLU.data().get();
        Iint* const LUi = handle->csrColIndLU.data().get();
        T* const LUx = handle->csrValLU_array.data().get();

        bool const isok_size = (handle->csrRowPtrLU.size() == (n + 1))
            && (handle->csrColIndLU.size() == nnzLU) && (handle->csrValLU_array.size() >= nnzLU);

        bool const isok_nonnull = (LUp != nullptr) && (LUi != nullptr) && (LUx != nullptr);
        bool const isok_all = isok_size && isok_nonnull;
        if(!isok_all)
        {
            return (ROCSOLVER_STATUS_NOT_INITIALIZED);
        };

        *nnzM = nnzLU;

        *Mp = LUp;
        *Mi = LUi;
        *Mx = LUx;
    }
    catch(const std::system_error& e)
    {
        istat_return = ROCSOLVER_STATUS_EXECUTION_FAILED;
    }
    catch(...)
    {
        istat_return = ROCSOLVER_STATUS_INTERNAL_ERROR;
    };

    return (istat_return);
};

#endif
